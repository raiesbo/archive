[{"D:\\CODES\\projects\\devWebArchive\\client\\src\\pages\\home.page.jsx":"1","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\project.component.jsx":"2","D:\\CODES\\projects\\devWebArchive\\client\\src\\App.js":"3","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\projects.component.jsx":"4","D:\\CODES\\projects\\devWebArchive\\client\\src\\index.js":"5","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\footer.component.jsx":"6","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\navbar.component.jsx":"7","D:\\CODES\\projects\\devWebArchive\\client\\src\\pages\\admin.page.jsx":"8","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\admin\\login.component.jsx":"9","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\admin\\projects.component.jsx":"10","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\admin\\signup.component.jsx":"11"},{"size":711,"mtime":1612525759628,"results":"12","hashOfConfig":"13"},{"size":1315,"mtime":1612538663510,"results":"14","hashOfConfig":"13"},{"size":1238,"mtime":1612525735426,"results":"15","hashOfConfig":"13"},{"size":3237,"mtime":1611586444636,"results":"16","hashOfConfig":"13"},{"size":599,"mtime":1611937637470,"results":"17","hashOfConfig":"13"},{"size":1603,"mtime":1612511206832,"results":"18","hashOfConfig":"13"},{"size":1347,"mtime":1612528572758,"results":"19","hashOfConfig":"13"},{"size":2558,"mtime":1612530188991,"results":"20","hashOfConfig":"13"},{"size":2553,"mtime":1612532989715,"results":"21","hashOfConfig":"13"},{"size":5017,"mtime":1612553615217,"results":"22","hashOfConfig":"13"},{"size":3085,"mtime":1612533011174,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ejcdjl",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"D:\\CODES\\projects\\devWebArchive\\client\\src\\pages\\home.page.jsx",[],"D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\project.component.jsx",[],"D:\\CODES\\projects\\devWebArchive\\client\\src\\App.js",["51"],"import React, { useState, useEffect } from \"react\";\nimport './App.css';\n\nimport Home from \"./pages/home.page\";\nimport Admin from \"./pages/admin.page\";\n\nimport {\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n  ////////////////////////////\n  //DARK MODE//LOCAL STORAGE//\n  ////////////////////////////\n\n  const [darkMode, setDarkMode] = useState(false);\n  let storedDarkMode = localStorage.getItem(\"darkMode\");\n\n  useEffect(() => {\n    if (storedDarkMode === \"true\") {\n      setDarkMode(true);\n      document.getElementById(\"body\").classList.toggle(\"darkmode\");\n    }\n  }, [])\n\n  const darkModeHandler = () => {\n    // CLICK ON TOGGLE HANDLER\n    setDarkMode(!darkMode)\n    document.getElementById(\"body\").classList.toggle(\"darkmode\");\n    localStorage.setItem(\"darkMode\", !darkMode)\n  }\n\n  const url = \"http://localhost:5000/\";\n\n\n  return (\n    <div className=\"App\">\n\n      <Switch>\n\n        <Route path=\"/admin/:action\" >\n          <Admin url={url}/>\n        </Route>\n\n        <Route path=\"/admin\" exact>\n          <Admin url={url}/>\n        </Route>\n\n        <Route path=\"/\" exact>\n          <Home darkModeHandler={darkModeHandler} url={url}/>\n        </Route>\n\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default App;\n","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\projects.component.jsx",[],["52","53"],"D:\\CODES\\projects\\devWebArchive\\client\\src\\index.js",[],["54","55"],"D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\footer.component.jsx",[],"D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\navbar.component.jsx",[],"D:\\CODES\\projects\\devWebArchive\\client\\src\\pages\\admin.page.jsx",["56","57","58"],"D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\admin\\login.component.jsx",[],"D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\admin\\projects.component.jsx",["59","60","61","62","63","64"],"import { useState, useEffect } from 'react';\r\nimport \"./projects.styles.css\";\r\n\r\n\r\n\r\n\r\nexport default function AdminProjects({ url, username }) {\r\n\r\n    const [projectsList, setProjectsList] = useState([]);\r\n    const [newProject, setNewProject] = useState({});\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [projectsList, username, url])\r\n\r\n    const fetchData = () => {\r\n        fetch(`${url}admin/${username}`)\r\n            .then(response => response.json())\r\n            .then(data => setProjectsList(data))\r\n            .catch(e => console.log(e))\r\n    }\r\n\r\n    const projects = () => {\r\n        return (\r\n            projectsList.map((project, id) => {\r\n                return (\r\n                    <div className=\"project-tile\">\r\n                        <i className=\"far fa-folder folder fa-lg\"></i>\r\n                        <h3 className=\"project-title\">{project.name}</h3>\r\n                        <p className=\"project-description\">{project.description}</p>\r\n                        <p className=\"tags\">{project.tags.map((item, id) => <span className=\"tag\" key={id}>{item}</span>)}</p>\r\n                        <p className=\"project-date\">{project.date}</p>\r\n                        <div className=\"project-icons-links\">\r\n                            {Object.keys(project.links).map((link, id) => {\r\n                                return (\r\n                                    <a href={project.links[link]} key={id}>{link === \"website\" ? <i className=\"fas fa-external-link-alt fa-lg\"></i> : <i className=\"fab fa-github fa-lg\"></i>}</a>\r\n                                )\r\n                            })}\r\n\r\n                        </div>\r\n                        <button className=\"project-button\"><i className=\"fas fa-pen\"></i></button>\r\n                        <button className=\"project-button\" onClick={() => deleteProject(project._id)}><i className=\"fas fa-trash-alt\"></i></button>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    const createProject = (project) => {\r\n        try {\r\n            const res = fetch(`${url}admin/`, {\r\n                method: \"post\",\r\n                body: JSON.stringify({action: \"create\", project: project }),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n\r\n            });\r\n\r\n            const data = res.json()\r\n        }\r\n        catch(e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const deleteProject = async (id) => {\r\n        try {\r\n            const res = await fetch(`${url}admin/`, {\r\n                method: \"post\",\r\n                body: JSON.stringify({ action: \"delete\", id: id }),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            });\r\n            const data = await res.json()\r\n            fetchData()\r\n            console.log(data.message)\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n\r\n    const NewProjectTemplate = ({createProject}) => {\r\n\r\n        return (\r\n            <div className=\"current-projects\">\r\n                <h4 className=\"section-title\">New Project:</h4>\r\n                <div className=\"project-tile new-project\">\r\n                    <form onSubmit={ ()=> createProject(\"\")}>\r\n                        <label htmlFor=\"name\">ProjectÂ´s name</label>\r\n                        <input type=\"text\" name=\"name\" value=\"\" />\r\n                        <label htmlFor=\"description\">Description</label>\r\n                        <input type=\"text\" name=\"description\" />\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <input type=\"text\" name=\"date\" />\r\n                        <label htmlFor=\"tags\">Tags</label>\r\n                        <input type=\"text\" name=\"tags\" />\r\n                        <label htmlFor=\"github\">Github Repo</label>\r\n                        <input type=\"text\" name=\"github\" />\r\n                        <label htmlFor=\"web\">Web URL</label>\r\n                        <input type=\"text\" name=\"web\" />\r\n                        <input type=\"text\" />\r\n\r\n                        <button>Save new project</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"projectsList-container\">\r\n            {/* <p>admin - projects</p> */}\r\n\r\n\r\n            <div className=\"current-projects\">\r\n                {/* <NewProjectTemplate createProject={createProject}/> */}\r\n                <h4 className=\"section-title\">List of your projects:</h4>\r\n                {projectsList ? projects() : <p>\"loading...\"</p>}\r\n            </div>\r\n\r\n            <div className=\"control-panel\">\r\n                <div className=\"projects-num\">\r\n                    <h4 className=\"\">NÂ° of projects: {projectsList.length}</h4>\r\n                </div>\r\n                <button className=\"project-button\">Create new project{/*<i class=\"fas fa-plus\"></i>*/}</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","D:\\CODES\\projects\\devWebArchive\\client\\src\\components\\admin\\signup.component.jsx",["65"],"import Cookies from 'universal-cookie';\r\nimport { useState, useEffect } from 'react';\r\nimport \"./login.styles.css\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nexport default function SignUp({ url }) {\r\n\r\n    let history = useHistory();\r\n\r\n    // handle form data\r\n    const [formData, setFormData] = useState({});\r\n    const [emailError, setEmailError] = useState(\"\");\r\n    const [usernameError, setUsernameError] = useState(\"\");\r\n    const [passwordError, setPasswordError] = useState(\"\");\r\n\r\n    const handleUsername = (e) => setFormData({ ...formData, username: e.target.value });\r\n    const handleEmail = (e) => setFormData({ ...formData, email: e.target.value });\r\n    const handlePassword = (e) => setFormData({ ...formData, password: e.target.value });\r\n\r\n\r\n    const signupUser = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // reset errors\r\n        setEmailError(\"\")\r\n        setUsernameError(\"\")\r\n        setPasswordError(\"\")\r\n\r\n        // post data to server\r\n        try {\r\n            const res = await fetch(`${url}signup`, {\r\n                method: \"POST\",\r\n                body: JSON.stringify(formData),\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            // handle errors\r\n            if (data.errors) {\r\n                setEmailError(data.errors.email)\r\n                setUsernameError(data.errors.unsername)\r\n                setPasswordError(data.errors.password)\r\n            }\r\n\r\n            // handle signup\r\n            if (data.user) {\r\n                const cookie = new Cookies();\r\n                const maxAge = 3 * 24 * 60 * 60; // in Seconds\r\n                cookie.set('token', String(data.token), { path: '/', maxAge });\r\n                cookie.set('name', formData.username, { path: '/', maxAge });\r\n                // console.log(cookie.get('token'));\r\n                // console.log({user: data.user})\r\n                return history.push('/admin/projects')\r\n            }\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(\"ERROR: \", err)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form className=\"login-form\" onSubmit={signupUser} >\r\n\r\n            <div className=\"login-title\">Sign Up</div>\r\n\r\n            <label htmlFor=\"username\">Username:</label>\r\n            <input type=\"text\" name=\"username\" value={formData.username} onChange={handleUsername} autocomplete='off' />\r\n\r\n            <label htmlFor=\"email\">Email:</label>\r\n            <input type=\"email\" name=\"email\" value={formData.email} onChange={handleEmail} autocomplete='off' />\r\n\r\n            <label htmlFor=\"password\">Password:</label>\r\n            <input type=\"password\" name=\"password\" value={formData.password} onChange={handlePassword} autocomplete='off' />\r\n\r\n            <div className=\"username-error error\">{usernameError}</div>\r\n            <div className=\"email-error error\">{emailError}</div>\r\n            <div className=\"password-error error\">{passwordError}</div>\r\n\r\n            <button type=\"submit\">Submit</button>\r\n\r\n        </form>\r\n    )\r\n}\r\n",{"ruleId":"66","severity":1,"message":"67","line":27,"column":6,"nodeType":"68","endLine":27,"endColumn":8,"suggestions":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"70","replacedBy":"74"},{"ruleId":"72","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":10,"column":33,"nodeType":"78","messageId":"79","endLine":10,"endColumn":36},{"ruleId":"66","severity":1,"message":"80","line":25,"column":5,"nodeType":"78","endLine":25,"endColumn":14,"suggestions":"81"},{"ruleId":"66","severity":1,"message":"82","line":25,"column":15,"nodeType":"83","endLine":33,"endColumn":6},{"ruleId":"76","severity":1,"message":"84","line":10,"column":12,"nodeType":"78","messageId":"79","endLine":10,"endColumn":22},{"ruleId":"76","severity":1,"message":"85","line":10,"column":24,"nodeType":"78","messageId":"79","endLine":10,"endColumn":37},{"ruleId":"66","severity":1,"message":"86","line":15,"column":8,"nodeType":"68","endLine":15,"endColumn":37,"suggestions":"87"},{"ruleId":"76","severity":1,"message":"88","line":50,"column":11,"nodeType":"78","messageId":"79","endLine":50,"endColumn":24},{"ruleId":"76","severity":1,"message":"89","line":61,"column":19,"nodeType":"78","messageId":"79","endLine":61,"endColumn":23},{"ruleId":"76","severity":1,"message":"90","line":87,"column":11,"nodeType":"78","messageId":"79","endLine":87,"endColumn":29},{"ruleId":"76","severity":1,"message":"91","line":2,"column":20,"nodeType":"78","messageId":"79","endLine":2,"endColumn":29},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'storedDarkMode'. Either include it or remove the dependency array.","ArrayExpression",["92"],"no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],"no-unused-vars","'url' is defined but never used.","Identifier","unusedVar","React Hook useEffect contains a call to 'setLogedIn'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cookie] as a second argument to the useEffect Hook.",["95"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'newProject' is assigned a value but never used.","'setNewProject' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["96"],"'createProject' is assigned a value but never used.","'data' is assigned a value but never used.","'NewProjectTemplate' is assigned a value but never used.","'useEffect' is defined but never used.",{"desc":"97","fix":"98"},"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [storedDarkMode]",{"range":"103","text":"104"},"Add dependencies array: [cookie]",{"range":"105","text":"106"},"Update the dependencies array to be: [projectsList, username, url, fetchData]",{"range":"107","text":"108"},[590,592],"[storedDarkMode]",[1030,1030],", [cookie]",[318,347],"[projectsList, username, url, fetchData]"]